---
import { navigation } from "@/consts/navigation";
import Socials from "./socials.astro";
import { cn } from "@/lib/cn";
import Glow from "../ui/glow.astro";

interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<div
  class={cn(
    "fixed top-[5.2rem] left-0 hidden transition-all max-lg:bg-black/95 duration-150 w-full lg:w-auto z-[9999] lg:pt-0 pt-16 lg:block lg:static  nav ",
    className,
  )}
>
  <nav
    class="z-30 flex h-screen flex-col items-center gap-4 lg:mx-auto lg:h-auto lg:flex-row lg:gap-0 lg:pr-2 lg:pt-0 xl:pr-4"
  >
    {
      navigation.map((nav) => (
        <a
          class={`${nav.borderStyle && "t rounded-full border-2 border-white !py-1 transition-all after:hidden hover:bg-white hover:text-dark-1 lg:mx-2"} relative inline-block px-4 py-2 text-xl text-white after:absolute after:bottom-1 after:left-1/2 after:h-0.5 after:w-0 after:rounded-full after:bg-white after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full lg:py-8 lg:text-sm lg:after:bottom-4 xl:px-6 min-1130:text-base`}
          href={nav.href}
        >
          {nav.title}
        </a>
      ))
    }

    <Socials className="mt-4 flex lg:hidden" />
    <Glow className="opacity-[0.3] lg:hidden" />
  </nav>
</div>

<script>
  import { $$, $ } from "@/lib/dom-selector";
  const navLinks = $$(".nav a");
  const nav = $(".nav");
  const menuSvg = $("#menuSvg");
  function toggleMenu(menuMobileContent: HTMLElement | null) {
    menuMobileContent?.classList.toggle("block");
    menuMobileContent?.classList.toggle("hidden");
    document.body.classList.toggle("overflow-hidden");
    document.body.classList.toggle("lg:overflow-auto");
  }

  function toggleMenuIcon(
    menuSvg: HTMLElement | null,
    openNavigation: boolean,
  ) {
    const rect1 = menuSvg?.querySelector("rect:nth-child(1)");
    const rect2 = menuSvg?.querySelector("rect:nth-child(2)");

    if (rect1 && rect2) {
      rect1.setAttribute("y", openNavigation ? "5" : "0");
      rect1.setAttribute("transform", `rotate(${openNavigation ? "45" : "0"})`);
      rect2.setAttribute("y", openNavigation ? "5" : "10");
      rect2.setAttribute(
        "transform",
        `rotate(${openNavigation ? "-45" : "0"})`,
      );
    }
  }

  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      if (window.innerWidth >= 768) return;
      toggleMenu(nav);

      const openNavigation = !nav.classList.contains("hidden");

      toggleMenuIcon(menuSvg, openNavigation);
    });
  });
</script>
